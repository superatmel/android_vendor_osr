#!/bin/sh
#
# Squish a OSR otapackage for distribution
# cyanogen
#

. $ANDROID_BUILD_TOP/vendor/osr/tools/functions
. mensajes.sh
OUT_TARGET_HOST=linux-x86
export VENDOR=vendor/osr
MODS=$VENDOR/mods
OTAPACKAGE=$OUT/$PRODUCT_ROM_FILE-ota.zip
REPACK=$OUT/repack.d
REPACKOTA=$REPACK/ota
ROMPACKAGE=$OUT/$PRODUCT_ROM_FILE.zip

# Valores por defecto
CHANGENAME=0
APP_GOOGLE=0

#Valores específicos
case "$ALIAS" in
    jflte)
	CHANGENAME=1
	APP_GOOGLE=1
	TERMINAL=S4
        ;;
    sirius)
	CHANGENAME=1
	APP_GOOGLE=1
	TERMINAL=XPERIA-Z2
        ;;
esac

if [ "$CHANGENAME" -eq 1 ];
then
msgInfo " "
msgList2 "TRABAJANDO PARA" "$TERMINAL"
msgInfo " "
else
msgInfo " "
msgLis2 "TRABAJANDO PARA" "$ALIAS"
msgErr "no has modificado el nombre de la ROM final, especifica CHANGENAME=1 en la configuracion del Valor"
msgInfo " "
fi

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5=md5
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo -e $CL_RED"ERROR: $0 only works with a full build environment. $OUT should exist."$CL_RST
	exit 1
fi

if [ ! -f "$OTAPACKAGE" ]; then
	echo -e $CL_RED"$OTAPACKAGE doesn't exist!"$CL_RST;
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/osr/tools/opticharger
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"
DELETE_MEDIA="*.qmg"
DELETE_APKS="LiveWallpapers.apk SpeechRecorder.apk VideoEditor.apk HoloSpiralWallpaper.apk MagicSmokeWallpapers.apk NoiseField.apk Galaxy4.apk OpenWnn.apk PinyinIME.apk"
DELETE_PRIV_APKS="Launcher2.apk  VoiceDialer.apk"
DELETE_GALLERY="Gallery2.apk"
DELETE_FONTS="MTLmr3m.ttf"

REPACK=$OUT/repack.d
msgWarn "LIMPIANDO ENTORNO..."
rm -rf $REPACK
mkdir -p $REPACK
echo


# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
msgList1 "DESCOMPRIMIENDO" "$OTAPACKAGE..."
unzip $QUIET $OTAPACKAGE
echo

# Copiado de archivos comunes
    cp -rf $ANDROID_BUILD_TOP/$MODS/common/* $REPACKOTA/

# Copiado de archivos especificos del dispositivo
    if [ ! -f "$VENDOR/mods/terminales/$ALIAS" ]; then
    	cp -rf $ANDROID_BUILD_TOP/$MODS/terminales/$ALIAS/. $REPACKOTA/
	else
msgList1 "SIN PERSONALIZACION DESDE" "VENDOR/OSR/TERMINALES/MOD"
    fi

# Ejecuta si existe personalizaciones específicas del dispositivo.
    if [ -f $ANDROID_BUILD_TOP/$MODS/terminales/$ALIAS/personalizar.sh ]; then
    	$ANDROID_BUILD_TOP/$MODS/terminales/$ALIAS/personalizar.sh $REPACKOTA
    	rm $REPACKOTA/personalizar.sh
    fi

# Copiado de aplicaciones extras de Google
    if [ "$APP_GOOGLE" -eq 1 ]; then
       msgList2 "CON" "GOOGLE GAPPS"
	echo " "
    cp -rf $ANDROID_BUILD_TOP/$MODS/GOOGLE/* $REPACK/ota/system/
	else
       msgList2 "SIN" "GOOGLE GAPPS"
	echo " "
    fi

# Move all apks to the same directory so xargs can
# use also with framework-res.apk. This allow process
# framework-res.apk in parallel with other apks
mkdir -p $REPACK/parallel
cd $REPACK/parallel
cp $REPACK/ota/system/framework/framework-res.apk .
cp $REPACK/ota/system/app/*.apk .
for f in $REPACK/ota/system/priv-app/*.apk; do
    cp $f ./priv-app-$(basename $f)
done


# Do optimization in parallel
find ./ -name \*.apk | $XARGS $OPTICHARGER

# Move optimized apks to repack directory
mv -f $REPACK/parallel/framework-res.apk $REPACK/ota/system/framework/framework-res.apk
for f in $REPACK/parallel/priv-app*.apk; do
    mv $f $REPACK/ota/system/priv-app/$(basename $f | cut -d'-' -f3)
done
mv -f $REPACK/parallel/*.apk $REPACK/ota/system/app/

# Return to directory
cd $REPACK/ota
rm -rf $REPACK/parallel
)

# Fix build.prop
$SED -i \
	-e '/ro\.kernel\.android\.checkjni/d' \
	-e '/ro\.build\.type/s/eng/user/' \
	$REPACK/ota/system/build.prop


# Delete unnecessary binaries
( cd $REPACK/ota/system/bin; echo $DELETE_BINS | xargs rm -f; )

# Delete Offline charging mode files
( cd $REPACK/ota/system/media; echo $DELETE_MEDIA | xargs rm -f; )

# Delete Home Apk's
( cd $REPACK/ota/system/app; echo $DELETE_APKS | xargs rm -f; )

# Delete priv-app Apk's
( cd $REPACK/ota/system/priv-app; echo $DELETE_PRIV_APKS | xargs rm -f; )

# No need for modem.bin
rm -f $REPACK/ota/modem.bin

# No need for media/video
rm -rf $REPACK/ota/system/media/video

# Delete Unnecessary Fonts
( cd $REPACK/ota/system/fonts; echo $DELETE_FONTS | xargs rm -f; )

# Delete compiled fonts
#rm -rf $REPACK/ota/system/fonts

#make dir for fonts again
#mkdir $REPACK/ota/system/fonts

# Add precompiled fonts
#mv -f $REPACK/ota/system/sfont/*.ttf $REPACK/ota/system/fonts/

# No need for tts
rm -rf $REPACK/ota/system/tts

# No need for srec
rm -rf $REPACK/ota/system/usr/srec

# No need for recovery
rm -rf $REPACK/ota/recovery
rm -rf $REPACK/ota/system/etc/recovery-resource.dat

# Fix LCD Density for slim
#DEVICELCD=`sed -n -e'/ro\.sf\.lcd_density/s/^.*=//p' $OUT/system/build.prop`
#if [ "$DEVICELCD" = "240" ]; then
#   sed -i 's/ro.sf.lcd_density=240/ro.sf.lcd_density=182/g' $OUT/system/build.prop
#elif [ "$DEVICELCD" = "320" ]; then
#    sed -i 's/ro.sf.lcd_density=320/ro.sf.lcd_density=245/g' $OUT/system/build.prop
#elif [ "$DEVICELCD" = "480" ]; then
#    sed -i 's/ro.sf.lcd_density=480/ro.sf.lcd_density=370/g' $OUT/system/build.prop
#elif [ "$DEVICELCD" = "213" ]; then
#    sed -i 's/ro.sf.lcd_density=213/ro.sf.lcd_density=182/g' $OUT/system/build.prop
#fi

# Fix LCD Density for GNote
#DEVICEID=`sed -n -e'/ro\.product\.device/s/^.*=//p' $OUT/system/build.prop`
#if [ "$DEVICEID" = "SGH-I717" ]; then
#   sed -i 's/ro.sf.lcd_density=245/ro.sf.lcd_density=268/g' $OUT/system/build.prop
#elif [ "$DEVICEID" = "GT-N7000" ]; then
#   sed -i 's/ro.sf.lcd_density=245/ro.sf.lcd_density=268/g' $OUT/system/build.prop
#elif [ "$DEVICEID" = "mako" ]; then
#   sed -i 's/ro.sf.lcd_density=245/ro.sf.lcd_density=268/g' $OUT/system/build.prop
#elif [ "$DEVICEID" = "flo" ]; then
#   sed -i 's/ro.sf.lcd_density=245/ro.sf.lcd_density=286/g' $OUT/system/build.prop
#elif [ "$DEVICEID" = "deb" ]; then
#   sed -i 's/ro.sf.lcd_density=245/ro.sf.lcd_density=286/g' $OUT/system/build.prop
#fi
#cp -f $OUT/system/build.prop $REPACK/ota/system/build.prop


# Determine what to name the new signed package
MODVERSION=`sed -n -e'/ro\.osr\.version/s/^.*=//p' $REPACK/ota/system/build.prop`

#Para cambiar el nombre del TARGET_DEVICE a uno personalizado
if [ "$CHANGENAME" -eq 1 ];  
then
echo $MODVERSION | sed "s/$ALIAS/$TERMINAL/g" > $REPACK/ota/system/model
MODEL=`cat $REPACK/ota/system/model`

sed -i "s/ro.modversion=$MODVERSION/ro.modversion=$MODEL/g" $REPACK/ota/system/build.prop
sed -i "s/ro.osr.version=$MODVERSION/ro.osr.version=$MODEL/g" $REPACK/ota/system/build.prop
sed -i "s/ro.slim.version=$MODVERSION/ro.slim.version=$MODEL/g" $REPACK/ota/system/build.prop
rm $REPACK/ota/system/model
    if [ "$APP_GOOGLE" -eq 1 ]; then
OUTFILE=$OUT/$MODEL-Gapps.zip
echo " "
msgInfo MODVERSION:
msgOK $MODEL-Gapps.zip
echo " "
else
OUTFILE=$OUT/$MODEL.zip
echo " "
msgInfo MODVERSION:
msgOK $MODEL.zip
echo " "
fi
else
OUTFILE=$OUT/$MODVERSION.zip
echo " "
msgInfo MODVERSION:
msgOK $MODVERSION
echo " "
fi

# Pack it up and sign
msgInfo "COMPRIMIENDO SISTEMA..."
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )
msgInfo "FIRMANDO SISTEMA..."
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx1024m \
	-jar $OUT/../../../host/$OUT_TARGET_HOST/framework/signapk.jar \
	-w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
	$REPACK/update.zip $OUTFILE
msgInfo "EJECUTANDO LIMPIEZA..."
rm -rf $REPACK

# Create a md5 checksum image of the repacked package
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5sum
msgList2 "PAQUETE COMPLETO:" "$OUTFILE"
msgList2 "md5" "$(cat $img.md5sum | awk '{ print $1 }')"$CL_RST
echo " "
)

exit 0
